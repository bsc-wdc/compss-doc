\section{Common Issues}
\label{sec:Common_Issues}

This section provides answers for the most common issues that users encounter while beginning to execute COMPSs applications.
Nevertheless, if your specific issues are not covered through this section, please do not hesitate to contact us at:
\begin{center}
  \textbf{\url{support-compss@bsc.es}}
\end{center}

\subsection{How to debug}
When the application does not behave as expected the first thing users must do is to run it in \textbf{debug} mode. We remember that
the runcompss command allows to introduce a \textit{-d} flag to enable the debug log level.

Once done, application execution will produce the following files:
\begin{itemize}
 \item runtime.log
 \item resources.log
 \item jobs folder
\end{itemize}

Firstly, users should check the last lines of the runtime.log. If the file-transfers or the tasks are failing an error message 
will appear in this file. 
Secondly, if the file-transfers are successfully and the jobs are submited, users should check the \textit{jobs} folder and look 
at the error messages produced inside each job. Users should notice that if there are $\_RESUBMITTED$ files something 
inside the job is failing.

\subsection{Tasks are not executed}
If the tasks remain in \textbf{Blocked} state means that there are no existing resouces matching the specific task constraints. 
This error can be potentially caused by two facts: in one hand, because the resources are not correctly loaded into the runtime
and, in the other hand, because the task constraints do not really match with any resource. 

In the first case, users should take a look at the \textit{resouces.log} and check that all the resources
defined in the \textit{project.xml} file are available for the runtime. In the second case users should re-define the task 
constraints taking into account the resources capabilities defined into the \textit{resources.xml} and \textit{project.xml} files.

\subsection{Jobs sistematically fail}
If all the application tasks fail because all the submited jobs fail, it is probably due to the fact that there is a resource 
missconfiguration. In most of the cases, the resource that the application is trying to access has no passwordless access through
the configured user. Users can try if this is their case by executing the following steps:
\begin{itemize}
 \item Open the project.xml that the application is using. Remember that the default file is stored under \textit{/opt/COMPSs/
 Runtime/configuration/xml/projects/project.xml}
 \item For each resource annotate its name and the value inside the \textit{User} tag. Remember that if there is no \textit{User}
 tag COMPSs will try to connect this resource with the same username than the one that launches the main application.
 \item For each annotated resourceName - user please try \textit{ssh user@resourceName}. If the connection asks for a password then
 there has been a passwordless missconfiguration.
\end{itemize}

If there has been a passwordless missconfiguration you can solve it by running the following commands:
\begin{lstlisting}[language=bash]
compss@bsc:~$ scp ~/.ssh/id_dsa.pub user@resourceName:./mydsa.pub
compss@bsc:~$ ssh user@resourceName "cat mydsa.pub >> ~/.ssh/authorized_keys; rm ./mydsa.pub"
\end{lstlisting}

These commands are a quick solution, for further details please check the \textit{Additional Configuration} section 
inside the \textit{COMPSs Installation Manual} available at our website \url{http://compss.bsc.es}.

\subsection{Compilation error: @Method not found}
When trying to compile java applications users get some of the following compilation errors:
\begin{lstlisting}[language=bash]
error: package integratedtoolkit.types.annotations does not exist
import integratedtoolkit.types.annotations.Constraints;
                                          ^
error: package integratedtoolkit.types.annotations does not exist
import integratedtoolkit.types.annotations.Method;
                                          ^
error: package integratedtoolkit.types.annotations does not exist
import integratedtoolkit.types.annotations.Parameter;
                                          ^
error: package integratedtoolkit.types.annotations.Parameter does not exist
import integratedtoolkit.types.annotations.Parameter.Direction;
                                                    ^
error: package integratedtoolkit.types.annotations.Parameter does not exist
import integratedtoolkit.types.annotations.Parameter.Type;
                                                    ^
error: cannot find symbol
@Parameter(type = Type.FILE, direction = Direction.INOUT)
^
  symbol:   class Parameter
  location: interface APPLICATION_Itf
  
error: cannot find symbol
@Constraints(processorCoreCount = 2)
^
  symbol:   class Constraints
  location: interface APPLICATION_Itf
  
error: cannot find symbol
@Method(declaringClass = "application.ApplicationImpl")
^
  symbol:   class Method
  location: interface APPLICATION_Itf
\end{lstlisting}

All these errors are raised because the \textit{compss-engine.jar} is not available in the CLASSPATH. The default COMPSs installation
automatically inserts this package into the CLASSPATH but some users may have overwriten or deleted it. Please check that your 
environment variable CLASSPATH containts the \textit{compss-engine.jar} location by running the following command:
\begin{lstlisting}[language=bash]
$ echo $CLASSPATH | grep compss-engine
\end{lstlisting}
If the result of the previous command is empty it means that you are missing the \textit{compss-engine.jar} package in your classpath. 

The easiest solution comes up by manually exporting the CLASSPATH variable into the user session:
\begin{lstlisting}[language=bash]
$ export CLASSPATH=$CLASSPATH:/opt/COMPSs/Runtime/compss-engine.jar
\end{lstlisting}
However, you will need to remember to export this variable every time you log out and back in again. Consequently, we recomend to 
add this export to the \textit{.bashrc} file:
\begin{lstlisting}[language=bash]
$ echo "# COMPSs variables for Java compilation" >> ~/.bashrc
$ echo "export CLASSPATH=$CLASSPATH:/opt/COMPSs/Runtime/compss-engine.jar" >> ~/.bashrc
\end{lstlisting}

\colorComment{Attention: The \textit{compss-engine.jar} is installed inside the COMPSs installation directory. If you have performed
a custom installation, the path of the package may be different.}

\subsection{Jobs failed on method reflection}
When executing an application the main code gets stuck executing a task. Taking a look at the \textit{runtime.log} users can check
that the job associated to the task has failed (and all its resubmissions too). Then, opening the \textit{jobX_NEW.out} or the
\textit{jobX_NEW.err} files users find the following error:

\begin{lstlisting}[language=bash]
[ERROR|integratedtoolkit.Worker|Executor] Can not get method by reflection
integratedtoolkit.nio.worker.executors.Executor$JobExecutionException: Can not get method by reflection
        at integratedtoolkit.nio.worker.executors.JavaExecutor.executeTask(JavaExecutor.java:142)
        at integratedtoolkit.nio.worker.executors.Executor.execute(Executor.java:42)
        at integratedtoolkit.nio.worker.JobLauncher.executeTask(JobLauncher.java:46)
        at integratedtoolkit.nio.worker.JobLauncher.processRequests(JobLauncher.java:34)
        at integratedtoolkit.util.RequestDispatcher.run(RequestDispatcher.java:46)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NoSuchMethodException: simple.Simple.increment(java.lang.String)
        at java.lang.Class.getMethod(Class.java:1678)
        at integratedtoolkit.nio.worker.executors.JavaExecutor.executeTask(JavaExecutor.java:140)
        ... 5 more
\end{lstlisting}

This error is caused because COMPSs cannot find one of the tasks declared in the Java Interface. Commonly this is triggered by
one of the following errors:
\begin{itemize}
 \item The \textit{declaringClass} of the tasks in the Java Iterface has not been correctly defined
 \item The parameters of the tasks in the Java Iterface do not match the task
 \item The tasks have not been defined as \textit{public}
\end{itemize}
